-- MySQL Script generated by MySQL Workbench
-- Wed Oct 25 15:56:23 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema thewinegame
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema thewinegame
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `thewinegame` DEFAULT CHARACTER SET utf8 ;
USE `thewinegame` ;

-- -----------------------------------------------------
-- Table `thewinegame`.`wine`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `thewinegame`.`wine` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `color` VARCHAR(45) NULL,
  `region` VARCHAR(180) NULL,
  `producer` VARCHAR(45) NULL,
  `name` VARCHAR(90) NULL,
  `vintage` INT NULL,
  `size` INT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `thewinegame`.`wine_variety`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `thewinegame`.`wine_variety` (
  `wine` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  INDEX `fk_wine_variety_wine1_idx` (`wine` ASC),
  PRIMARY KEY (`wine`, `name`),
  CONSTRAINT `fk_wine_variety_wine1`
    FOREIGN KEY (`wine`)
    REFERENCES `thewinegame`.`wine` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `thewinegame`.`rating`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `thewinegame`.`rating` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NULL,
  `value` INT NULL,
  `wine` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_rating_wine_type1_idx` (`wine` ASC),
  CONSTRAINT `fk_rating_wine_type1`
    FOREIGN KEY (`wine`)
    REFERENCES `thewinegame`.`wine` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `thewinegame`.`image`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `thewinegame`.`image` (
  `link` VARCHAR(360) NOT NULL,
  `wine` INT NOT NULL,
  PRIMARY KEY (`link`),
  INDEX `fk_image_wine_type1_idx` (`wine` ASC),
  CONSTRAINT `fk_image_wine_type1`
    FOREIGN KEY (`wine`)
    REFERENCES `thewinegame`.`wine` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `thewinegame`.`price`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `thewinegame`.`price` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `value` FLOAT NULL,
  `currency` VARCHAR(45) NULL,
  `date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `store` VARCHAR(45) NULL,
  `wine` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_price_wine_type1_idx` (`wine` ASC),
  CONSTRAINT `fk_price_wine_type1`
    FOREIGN KEY (`wine`)
    REFERENCES `thewinegame`.`wine` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Function Levenshtein Similarity
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS `LEVENSHTEIN`;
DROP FUNCTION IF EXISTS `LEVENSHTEIN_RATIO`;

DELIMITER ;;;
CREATE FUNCTION `LEVENSHTEIN`(s1 VARCHAR(255), s2 VARCHAR(255)) RETURNS int(11) DETERMINISTIC
BEGIN
    DECLARE s1_len, s2_len, i, j, c, c_temp, cost INT;
    DECLARE s1_char CHAR;
    DECLARE cv0, cv1 VARBINARY(256);
    SET s1_len = CHAR_LENGTH(s1), s2_len = CHAR_LENGTH(s2), cv1 = 0x00, j = 1, i = 1, c = 0;
    IF s1 = s2 THEN
        RETURN 0;
    ELSEIF s1_len = 0 THEN
        RETURN s2_len;
    ELSEIF s2_len = 0 THEN
        RETURN s1_len;
    ELSE
        WHILE j <= s2_len DO
            SET cv1 = CONCAT(cv1, UNHEX(HEX(j))), j = j + 1;
        END WHILE;
        WHILE i <= s1_len DO
            SET s1_char = SUBSTRING(s1, i, 1), c = i, cv0 = UNHEX(HEX(i)), j = 1;
            WHILE j <= s2_len DO
                SET c = c + 1;
                IF s1_char = SUBSTRING(s2, j, 1) THEN SET cost = 0; ELSE SET cost = 1; END IF;
                SET c_temp = CONV(HEX(SUBSTRING(cv1, j, 1)), 16, 10) + cost;
                IF c > c_temp THEN SET c = c_temp; END IF;
                SET c_temp = CONV(HEX(SUBSTRING(cv1, j+1, 1)), 16, 10) + 1;
                IF c > c_temp THEN SET c = c_temp; END IF;
                SET cv0 = CONCAT(cv0, UNHEX(HEX(c))), j = j + 1;
            END WHILE;
            SET cv1 = cv0, i = i + 1;
        END WHILE;
    END IF;
    RETURN c;
END;;;

DELIMITER ;;;
CREATE FUNCTION `LEVENSHTEIN_RATIO`(s1 VARCHAR(255), s2 VARCHAR(255)) RETURNS DECIMAL(5, 2) DETERMINISTIC
BEGIN
    DECLARE s1_len, s2_len, max_len INT;
    SET s1_len = LENGTH(s1), s2_len = LENGTH(s2);
    IF s1_len > s2_len THEN SET max_len = s1_len; ELSE SET max_len = s2_len; END IF;
    RETURN (1 - LEVENSHTEIN(s1, s2) / max_len);
END;;;

-- -----------------------------------------------------
-- Function Overlap Similarity
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS `OVERLAP`;
DROP FUNCTION IF EXISTS `LOCATE_LIST`;

DELIMITER $$

CREATE FUNCTION `LOCATE_LIST`(word VARCHAR(255), str VARCHAR(255)) RETURNS INT
BEGIN
	DECLARE str_word VARCHAR(255);
    WHILE LENGTH(str) > 0 DO
        SET str_word = SUBSTRING_INDEX(str, ' ', 1);

		IF word = str_word THEN
			RETURN 1;
		END IF;
        
        SET str = SUBSTRING(str, LENGTH(str_word)+2, LENGTH(str));
    END WHILE;
    
    RETURN 0;
END$$

DELIMITER ;

DELIMITER $$

CREATE FUNCTION `OVERLAP`(str1 VARCHAR(255), str2 VARCHAR(255)) RETURNS DECIMAL(5,2)
BEGIN
    DECLARE words1 INT;
    DECLARE words2 INT;
    DECLARE common_words INT;
    DECLARE str1_word VARCHAR(255);
    DECLARE str2_word VARCHAR(255);
    DECLARE str1_old VARCHAR(255);
    
    SET words1 = 0;
    SET words2 = 0;
    SET common_words = 0;
    
	SET str1_old = '';
    
    SET str1 = CONCAT(str1, ' ');
    
    WHILE LENGTH(str1) > 0 DO
        SET str1_word = SUBSTRING_INDEX(str1, ' ', 1);
		SET words1 = words1 + 1;

		IF LOCATE_LIST(str1_word, str1_old) = 0 AND LOCATE_LIST(str1_word, str2) > 0 THEN
			SET common_words = common_words + 1;
		END IF;
        
        SET str1 = SUBSTRING(str1, LENGTH(str1_word)+2, LENGTH(str1));
        SET str1_old = CONCAT(str1_old, str1_word, ' ');
    END WHILE;
    
    SET str2 = CONCAT(str2, ' ');
    
    WHILE LENGTH(str2) > 0 DO
		SET str2_word = SUBSTRING_INDEX(str2, ' ', 1);
        SET words2 = words2 + 1;
        SET str2 = SUBSTRING(str2, LENGTH(str2_word)+2, LENGTH(str2));
    END WHILE;
    
    IF words1 = 0 OR words2 = 0 THEN
        RETURN 0; 
    END IF;

    RETURN common_words / LEAST(words1, words2);
END$$

DELIMITER ;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
